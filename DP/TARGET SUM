******************************************this problem is same as count of subset with a given difference
                        BEST EXPLANATION:https://youtu.be/Hw6Ygp3JBYw
                        Time Complexity: O(S*N), where S = sum of array elements + K/2 (here k is the given difference)
                                                          Auxiliary Space: O(S*N)************************************************************


#include<bits/stdc++.h>
class Solution {
public:
    int count(vector<int>& nums, int x,int n){
        
        int  t[n+1][x+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=x;j++){
                if(i==0){
                    t[i][j]=0;
                }
                 if(j==0){
                    t[i][j]=1;
                }
            }
        }
            for(int i=1;i<=n;i++){
            for(int j=0;j<=x;j++){
                if(nums[i-1]<=j){
                    t[i][j]=t[i-1][j-nums[i-1]]+t[i-1][j];
                }
                else{
                    t[i][j]=t[i-1][j];
                }
            }
            }
        return t[n][x];
        
    }
    int findTargetSumWays(vector<int>& nums, int target) {
     int n=nums.size();
       target = abs(target);
        int range=0;
        for(auto it:nums){
        range+=it;
        }
        int s1=(target+range)/2;
         if(range < target || (range + target) % 2 != 0)
            return 0;
        return count(nums,s1,n);
    }
};
