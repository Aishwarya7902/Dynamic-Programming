//RECURSIVE
int knapsack(vector<int> &val, vector<int> &wt, int n, int w)
{
	// Write your code here
    if(n==0 || w==0){
        return 0;
    }
    if(wt[n-1]<=w){
        return max(val[n-1]+knapsack(val,wt,n-1,w-wt[n-1]),
                 knapsack(val,wt,n-1,w));
    }
    else{
        return knapsack(val,wt,n-1,w);
    }
}
//********************memoization(GETTING TLE )
Time Complexity: O(N * W)
	Space Complexity: O(N * W)************************//
	
	
#include<bits/stdc++.h>
 
int maxProfit(vector<int> &val, vector<int> &wt, int n, int w)
{
	// Write your code here
    int** t;
    t = new int*[n+1];
 
    // loop to create the table dynamically
    for (int i = 0; i <=n; i++)
        t[i] = new int[w + 1];
 
    // loop to initially filled the
    // table with -1
    for (int i = 0; i <=n; i++)
        for (int j = 0; j < w + 1; j++)
            t[i][j] = -1;
    if(n==0 || w==0){
        return 0;
    }
    if(t[n][w]!=-1)return t[n][w];
    if(wt[n-1]<=w){
        return t[n][w]=max(val[n-1]+maxProfit(val,wt,n-1,w-wt[n-1]),
                 maxProfit(val,wt,n-1,w));
    }
    else{
        return  t[n][w]=maxProfit(val,wt,n-1,w);
    }
}

